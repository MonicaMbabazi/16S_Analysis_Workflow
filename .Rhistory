# load the required packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(VIM)
library(reshape2)
library(tidyr)
library(tibble)
library(readxl)
## Set a working directory
setwd("/home/monica/Desktop/IMMRSE_Study/IMMRSE-Concept/Explore_survey_data_09-2024/")
#Clear all variables:
#rm(list=ls(all=TRUE))
LTS_dataset <- read.csv("../CLEANING_EPI_DATA_03-2024/Output/Imm_Clean_survey_data.csv")
####
# Exclude rows where gender is missing (coded as "0")
Male <- LTS_dataset[LTS_dataset$gender == "Male", ]
View(Male)
View(Male)
Female <- LTS_dataset[LTS_dataset$gender == "Female", ]
gender_count <- table(LTS_dataset$gender)
cat("Total samples: ", nrow(LTS_dataset), "\n")
print(gender_count)
### Distribution per study sites
LTS_dataset <- LTS_dataset %>%
filter(mrccode != "0")
study_site_dist <- table(LTS_dataset$mrccode)
print(study_site_dist)
overnight_counts <- table(LTS_dataset$overnighttrips)
print(overnight_counts)
# Sum the counts of individuals who traveled (1, 2, 3, 4)
total_travelers <- sum(overnight_counts[c("1", "2", "3", "4")])
print(total_travelers)
# Calculate the total number of individuals
total_individuals <- sum(overnight_counts)
# Compute the total percentage of those who traveled
total_percentage_traveled <- (total_travelers/total_individuals) * 100
# Print the result
cat("Total percentage of individuals who traveled: ", total_percentage_traveled, "%\n")
##############################
# Create a percentage bar plot
# Compute the percentages
overnight_percentages <- prop.table(overnight_counts) * 100
print(overnight_percentages)
# Round the percentages to one decimal place
rounded_percentages <- round(overnight_percentages, 1)
# Create a bar plot of rounded percentages.
barplot(rounded_percentages, main = "Overnight Trips Percentages",
xlab = "Overnight Trips", ylab = "Percentage", col = "skyblue",
ylim = c(0, 100)) # Set the y-axis limits to ensure all labels are visible
# Create a contingency table for "overnighttrips" and "gender"
contingency_table <- table(LTS_dataset$overnighttrips, LTS_dataset$gender)
print(contingency_table)
#### Age
# Step 1: Replace NA values in ageyrs with 0 for those with non-missing agemonths
LTS_data$ageyrs[is.na(LTS_data$ageyrs) & !is.na(LTS_data$agemonths)] <- 0
# Create a contingency table for "overnighttrips" and "gender"
contingency_table <- table(LTS_dataset$overnighttrips, LTS_dataset$gender)
print(contingency_table)
# Record the travel categories (1, 2, 3, 4) as "Traveled" and keep "Not Traveled" (0)
LTS_data <- mutate(LTS_dataset, travel_status = ifelse(overnighttrips == 0, "Not Traveled", "Traveled"))
# Create a new contingency table for "travel_status" and "gender"
contingency_table_grouped <- table(LTS_data$travel_status, LTS_data$gender)
print(contingency_table_grouped)
# Create a bar plot for counts of individuals who traveled by gender
# Filter data to include only those who traveled
traveled_data <- filter(LTS_data, travel_status == "Traveled")
# Create a table of counts by gender
gender_counts <- table(traveled_data$gender)
# Calculate percentages
gender_percentages <- prop.table(gender_counts) * 100
#Create a bar plot for percentages of individuals who traveled by gender
gender_colors <- c("lightblue", "pink")
barplot(gender_percentages,
col = gender_colors,
main = "Percentages of Individuals Who Traveled by Gender",
xlab = "Gender", ylab = "Percentage of those that traveled",
names.arg = levels(traveled_data$gender),
ylim = c(0, 100))
#### Age
# Step 1: Replace NA values in ageyrs with 0 for those with non-missing agemonths
LTS_data$ageyrs[is.na(LTS_data$ageyrs) & !is.na(LTS_data$agemonths)] <- 0
# Step 2: Calculate total age in months only where agemonths is not NA
# Update the ageyrs column by adding the fractional years from agemonths where applicable
LTS_data$ageyrs <- ifelse(!is.na(LTS_data$agemonths),
round((LTS_data$agemonths / 12) + LTS_data$ageyrs, 1),
LTS_data$ageyrs)
### Let's compute for the median age
median_age <- median(traveled_data$ageyrs, na.rm = TRUE)
print(paste("Median age of those who traveled: ", median_age))
# Create a contingency table of overnighttrips versus mrccode
overnight_counts_by_mrccode <- table(LTS_data$overnighttrips, LTS_data$mrccode)
# Print the contingency table
print(overnight_counts_by_mrccode)
### Plot of travel status by site
# List of study sites
study_sites <- c("Chahafi", "Muko", "Maziba")
# Initialize an empty data frame to store the results
site_results <- data.frame()
# Loop through each study site
for (site in study_sites) {
# Subset the data for the current study site
site_data <- LTS_data[LTS_data$mrccode == site, ]
# Create a contingency table for travel status
contingency_table <- table(site_data$travel_status)
# Calculate the total number of individuals
total_individuals <- sum(contingency_table)
# Calculate the number of individuals who traveled
total_travelers <- contingency_table["Traveled"]
# Calculate the number of individuals who did not travel
total_not_travelers <- contingency_table["Not Traveled"]
# Create a data frame for the current site
site_result <- data.frame(
Site = rep(site, 2),
TravelStatus = c("Not Traveled", "Traveled"),
Percentage = c(100 - total_travelers / total_individuals * 100, total_travelers / total_individuals * 100),
Count = c(total_not_travelers, total_travelers)
)
# Append the result to the overall data frame
site_results <- rbind(site_results, site_result)
}
View(site_result)
# Create a grouped bar plot with fill by travel status and counts on top of each bar
ggplot(site_results, aes(x = Site, y = Percentage, fill = TravelStatus)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = Count),
position = position_dodge(width = 0.9),
vjust = -0.5) +
labs(title = "Travel Percentage Per Site",
x = "Sites",
y = "Percentage",
fill = "Travel Status") +
scale_fill_manual(values = c("#1f78b4", "#fb9a99")) +
theme_minimal()
View(site_results)
# Subset the data for individuals who traveled
traveled_data <- LTS_data[LTS_data$travel_status == "Traveled", ]
# Create a table of counts for each destination
destination_counts <- table(traveled_data$countrydestination1)
# Convert the table to a data frame
destination_df <- data.frame(Destination = names(destination_counts),
Count = as.numeric(destination_counts))
# Filter out rows with zero counts
destination_df <- destination_df[destination_df$Count > 0, ]
# Sort the data frame by count in descending order
destination_df <- destination_df[order(destination_df$Count, decreasing = TRUE), ]
print(destination_df)
# Create a bar plot
ggplot(destination_df, aes(x = Destination, y = Count, fill = Destination)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Travel Destinations ",
x = "Country",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
View(destination_df)
# Subset the data for individuals who traveled
traveled_data <- LTS_data[LTS_data$travel_status == "Traveled", ]
# Create a table of counts for each destination
destination_counts <- table(traveled_data$countrydestination1)
# Convert the table to a data frame
destination_df <- data.frame(Destination = names(destination_counts),
Count = as.numeric(destination_counts))
View(destination_df)
# Filter out rows with zero counts
destination_df <- destination_df[destination_df$Count > 0, ]
# Sort the data frame by count in descending order
destination_df <- destination_df[order(destination_df$Count, decreasing = TRUE), ]
print(destination_df)
# Create a bar plot
ggplot(destination_df, aes(x = Destination, y = Count, fill = Destination)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Travel Destinations ",
x = "Country",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
district_counts <- LTS_data %>%
filter(overnighttrips != 0) %>%
group_by(districtdestination1) %>%
summarize(individuals_count = n()) %>%
na.omit()
print(district_counts)
View(district_counts)
# Create a bar plot
ggplot(district_counts, aes(x = districtdestination1, y = individuals_count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Number of Individuals traveling to each District",
x = "District travelled to",
y = "Number of Individuals") +
theme_minimal()
library(ggplot2)
district_counts <- LTS_data %>%
filter(overnighttrips != 0) %>%
group_by(districtdestination1) %>%
summarize(individuals_count = n()) %>%
na.omit()
# Calculate percentages
district_counts$percentage <- (district_counts$individuals_count / sum(district_counts$individuals_count)) * 100
# Sort the data by percentage in descending order
district_counts <- district_counts[order(-district_counts$percentage), ]
# Create a bar plot with percentages on y-axis and counts on top of each bar
ggplot(district_counts, aes(x = reorder(districtdestination1, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = individuals_count), vjust = -0.5, color = "black") +  # Add count labels
labs(title = "Percentage of Individuals Traveling to Each District",
x = "Districts",
y = "Percentage of Individuals") +
theme_minimal()
contingency_table <- table(LTS_data$districtdestination1, LTS_data$travel_status)
print(contingency_table)
# Convert the table to a data frame
contingency_df <- as.data.frame.matrix(contingency_table)
print(contingency_df)
# Calculate percentages
contingency_df <- contingency_df %>%
mutate(
PercentageTraveled = Traveled / sum(Traveled) * 100,
PercentageNotTraveled = `Not Traveled` / sum(`Not Traveled`) * 100
)
print(contingency_df)
# Melt the data for easy plotting
melted_contingency_df <- contingency_df %>%
rownames_to_column(var = "Site") %>%
pivot_longer(cols = c(PercentageTraveled, PercentageNotTraveled),
names_to = "TravelStatus", values_to = "Percentage")
# Plot the data using a stacked bar plot
ggplot(melted_contingency_df, aes(x = Site, y = Percentage, fill = TravelStatus)) +
geom_bar(stat = "identity") +
labs(title = "Percentage of Individuals Traveling to Different Sites",
x = "Sites",
y = "Percentage of Individuals",
fill = "Travel Status") +
theme_minimal()
## To ensure there no duplicates
contingency_table <- table(toupper(LTS_data$otherdistrictdest1), LTS_data$travel_status)
# Convert the table to a data frame
contingency_df <- as.data.frame.matrix(contingency_table)
# Add a column for district names
contingency_df$District <- rownames(contingency_df)
# Ensure uniqueness by summing up duplicated rows
contingency_df_aggregated <- contingency_df %>%
group_by(District) %>%
summarize_all(sum)
# Filter rows with 5 or more individuals traveling
contingency_df_filtered <- contingency_df[contingency_df$Traveled >= 5, ]
# Preserve row names
contingency_df_filtered$District <- rownames(contingency_df_filtered)
# Calculate column-wise percentages for the filtered data
contingency_df_filtered$PercentageTraveled <- (contingency_df_filtered$Traveled / sum(contingency_df_filtered$Traveled)) * 100
# Print the filtered result
print(contingency_df_filtered)
View(contingency_df_aggregated)
# Plot the % travel per district with counts on top of the bars
ggplot(contingency_df_filtered, aes(x = District, y = PercentageTraveled)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = Traveled), vjust = -0.5, size = 3) +  # Add counts on top of bars
labs(title = "Percentage of Individuals Traveling to Different Districts",
x = "Other Districts",
y = "Percentage of Individuals",
fill = "Travel Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Adjust label rotation
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
plot.caption = element_text(hjust = 0))
#### This code still has an issue. I still get duplicates of the districts on graph.
```
# Assuming you have a contingency_table for "otherdistrictdest1" and "travel_status"
## To ensure there no duplicates
contingency_table <- table(toupper(LTS_data$otherdistrictdest1), LTS_data$travel_status)
# Convert the table to a data frame
contingency_df <- as.data.frame.matrix(contingency_table)
# Add a column for district names
contingency_df$District <- rownames(contingency_df)
# Ensure uniqueness by summing up duplicated rows
contingency_df_aggregated <- contingency_df %>%
group_by(District) %>%
summarize_all(sum)
# Filter rows with 5 or more individuals traveling
contingency_df_filtered <- contingency_df[contingency_df$Traveled >= 5, ]
# Preserve row names
contingency_df_filtered$District <- rownames(contingency_df_filtered)
# Calculate column-wise percentages for the filtered data
contingency_df_filtered$PercentageTraveled <- (contingency_df_filtered$Traveled / sum(contingency_df_filtered$Traveled)) * 100
# Print the filtered result
print(contingency_df_filtered)
# Plot the % travel per district with counts on top of the bars
ggplot(contingency_df_filtered, aes(x = District, y = PercentageTraveled)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = Traveled), vjust = -0.5, size = 3) +  # Add counts on top of bars
labs(title = "Percentage of Individuals Traveling to Different Districts",
x = "Other Districts",
y = "Percentage of Individuals",
fill = "Travel Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Adjust label rotation
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
plot.caption = element_text(hjust = 0))
#### This code still has an issue. I still get duplicates of the districts on graph.
### Let's look at the reasons why individuals travelled
travelreasons <- table(traveled_data$travelreason1)
# Create a bar plot
barplot(travelreasons, col = "skyblue", main = "Distribution of Travel Reasons", xlab = "Travel Reason", ylab = "Count", las = 2)
## The % for the two major reasons
# Order the table in descending order
sorted_reasons <- sort(travelreasons, decreasing = TRUE)
# Take the top two reasons
top_two <- sorted_reasons[1:2]
# Compute percentages
percentage_top_two <- prop.table(top_two) * 100
# Print the percentages
print(percentage_top_two)
## Save
write.csv(LTS_data, file = "../CLEANING_EPI_DATA_03-2024/Cluster_Analysis/survey_data_clean.csv", row.names = FALSE)
# Read the Excel file into a data frame
UMSP_Database <- read_excel("../Data_to-be_Compared/2024_01_30_UMSP_low_trans_sites_all_data.xls")
# Calculate the total number of tests and the number of positive tests per site
test_counts <- table(malaria_data$site)
# Read the Excel file into a data frame
UMSP_Database <- read_excel("../Data_to-be_Compared/2024_01_30_UMSP_low_trans_sites_all_data.xls")
# Select rows with "RDT" or "Microscopy" in the "malariatestdone" column
malaria_data <- UMSP_Database[UMSP_Database$malariatestdone %in% c("RDT", "Microscopy"), ]
# Calculate the total number of tests and the number of positive tests per site
test_counts <- table(malaria_data$site)
positive_counts <- table(malaria_data[malaria_data$malariatestresult == "Positive", ]$site)
# Compute test positivity rate per site
test_positivity_rate <- (positive_counts / test_counts) * 100
print(test_positivity_rate)
## Let us arrange the date column
malaria_data1 <- malaria_data[order(malaria_data$date), ]
# load the required packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(VIM)
library(reshape2)
library(tidyr)
library(tibble)
library(readxl)
## Set a working directory
setwd("/home/monica/Desktop/IMMRSE_Study/IMMRSE-Concept/Explore_survey_data_09-2024/")
#Clear all variables:
#rm(list=ls(all=TRUE))
####
# Exclude rows where gender is missing (coded as "0")
Male <- LTS_dataset[LTS_dataset$gender == "Male", ]
Female <- LTS_dataset[LTS_dataset$gender == "Female", ]
gender_count <- table(LTS_dataset$gender)
cat("Total samples: ", nrow(LTS_dataset), "\n")
print(gender_count)
### Distribution per study sites
LTS_dataset <- LTS_dataset %>%
filter(mrccode != "0")
study_site_dist <- table(LTS_dataset$mrccode)
print(study_site_dist)
print(gender_count)
# Calculate proportion of males per site
male_proportion <- LTS_dataset %>%
group_by(mrccode) %>%
summarize(
total_samples = n(),
male_count = sum(gender == "Male", na.rm = TRUE),
male_proportion = male_count / total_samples
)
# View the result
print(male_proportion)
overnight_counts <- table(LTS_dataset$overnighttrips)
print(overnight_counts)
# Sum the counts of individuals who traveled (1, 2, 3, 4)
total_travelers <- sum(overnight_counts[c("1", "2", "3", "4")])
print(total_travelers)
# Calculate the total number of individuals
total_individuals <- sum(overnight_counts)
# Compute the total percentage of those who traveled
total_percentage_traveled <- (total_travelers/total_individuals) * 100
# Print the result
cat("Total percentage of individuals who traveled: ", total_percentage_traveled, "%\n")
##############################
# Create a percentage bar plot
# Compute the percentages
overnight_percentages <- prop.table(overnight_counts) * 100
print(overnight_percentages)
# Round the percentages to one decimal place
rounded_percentages <- round(overnight_percentages, 1)
# Create a bar plot of rounded percentages.
barplot(rounded_percentages, main = "Overnight Trips Percentages",
xlab = "Overnight Trips", ylab = "Percentage", col = "skyblue",
ylim = c(0, 100)) # Set the y-axis limits to ensure all labels are visible
# Create a contingency table for "overnighttrips" and "gender"
contingency_table <- table(LTS_dataset$overnighttrips, LTS_dataset$gender)
print(contingency_table)
# Record the travel categories (1, 2, 3, 4) as "Traveled" and keep "Not Traveled" (0)
LTS_data <- mutate(LTS_dataset, travel_status = ifelse(overnighttrips == 0, "Not Traveled", "Traveled"))
# Create a new contingency table for "travel_status" and "gender"
contingency_table_grouped <- table(LTS_data$travel_status, LTS_data$gender)
print(contingency_table_grouped)
# Create a bar plot for counts of individuals who traveled by gender
# Filter data to include only those who traveled
traveled_data <- filter(LTS_data, travel_status == "Traveled")
# Create a table of counts by gender
gender_counts <- table(traveled_data$gender)
# Calculate percentages
gender_percentages <- prop.table(gender_counts) * 100
#Create a bar plot for percentages of individuals who traveled by gender
gender_colors <- c("lightblue", "pink")
barplot(gender_percentages,
col = gender_colors,
main = "Percentages of Individuals Who Traveled by Gender",
xlab = "Gender", ylab = "Percentage of those that traveled",
names.arg = levels(traveled_data$gender),
ylim = c(0, 100))
#### Age
# Step 1: Replace NA values in ageyrs with 0 for those with non-missing agemonths
LTS_data$ageyrs[is.na(LTS_data$ageyrs) & !is.na(LTS_data$agemonths)] <- 0
# Step 2: Calculate total age in months only where agemonths is not NA
# Update the ageyrs column by adding the fractional years from agemonths where applicable
LTS_data$ageyrs <- ifelse(!is.na(LTS_data$agemonths),
round((LTS_data$agemonths / 12) + LTS_data$ageyrs, 1),
LTS_data$ageyrs)
### Let's compute for the median age
median_age <- median(traveled_data$ageyrs, na.rm = TRUE)
print(paste("Median age of those who traveled: ", median_age))
# Calculate proportion of males and mean age of the entire population per site
site_summary <- LTS_dataset %>%
group_by(site) %>%
summarize(
total_samples = n(),
male_count = sum(gender == "Male", na.rm = TRUE),
male_proportion = male_count / total_samples,
mean_age = mean(ageyrs, na.rm = TRUE) # Mean age across the entire population at each site
)
# Calculate proportion of males and mean age of the entire population per site
site_summary <- LTS_dataset %>%
group_by(mrccode) %>%
summarize(
total_samples = n(),
male_count = sum(gender == "Male", na.rm = TRUE),
male_proportion = male_count / total_samples,
mean_age = mean(ageyrs, na.rm = TRUE) # Mean age across the entire population at each site
)
# View the summary
print(site_summary)
